@inject IDialogService DialogService

<FluentCard Width="250px" Height=150px>
    <FluentStack HorizontalAlignment="HorizontalAlignment.Start">
        <FluentIcon Value="@(new Icons.Regular.Size24.Person())" />
        <FluentLabel>@DialogData.Name</FluentLabel>
        <FluentBadge>@DialogData.Age</FluentBadge>
    </FluentStack>
    <FluentSpacer Width="1"/>
    <FluentStack HorizontalAlignment="HorizontalAlignment.Start"
                 VerticalAlignment="VerticalAlignment.Center">
        <FluentBadge>Administrador</FluentBadge>
        <FluentLabel> Since 2024.</FluentLabel>
    </FluentStack>
    <FluentSpacer Width="1" />
    <FluentStack HorizontalAlignment="HorizontalAlignment.End"
                 VerticalAlignment="VerticalAlignment.Bottom">
        <FluentButton Appearance="Appearance.Outline" Color="Color.Accent" OnClick="@EditAsync">Edit</FluentButton>
        <FluentButton Appearance="Appearance.Accent" OnClick="@OpenPnel">Panel</FluentButton>
    </FluentStack>
</FluentCard>


@code
{
    private async Task EditAsync()
    {
        // Create a new instance of DialogData
        // to allow the user to cancel the update
        var data = DialogData with { Id = 0 } ?? new();

        var dialog = await DialogService.ShowDialogAsync<UserUpdateForm>(data, new DialogParameters()
            {
                Height = "400px",
                Title = $"Updating the {DialogData.Name} sheet",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true,
            });

        var result = await dialog.Result;
        if (!result.Cancelled && result.Data != null)
        {
            DialogData = (UserUpdateForm.RegisterContent)result.Data;
        }

    }
}
